1,6d0
< // This extra program implemented all three challenge execises:
< // Implement lists of commands, separated by ";"
< // Implement sub shells by implementing "(" and ")"
< // Implement running commands in the background by supporting "&" and "wait"
< 
< 
46,56d39
< struct listcmd {
<   int type;         // ;
<   struct cmd *left; // left side of list
<   struct cmd *right; //right side of list
< };
< 
< struct backcmd {
<   int type;        //&
<   struct cmd *cmd;
< };
< 
65d47
<   struct backcmd *bcmd;
67d48
<   struct listcmd *lcmd;
88,95d68
<     
<   case ';':
<     lcmd = (struct listcmd*)cmd; 
<     if(fork1() == 0)
<       runcmd(lcmd->left);
<       wait(0);
<     runcmd(lcmd->right);
<     break;   
145,150d117
<   
<   case '&':
<     bcmd = (struct backcmd*)cmd;
<     if(fork1() == 0)
<       runcmd(bcmd->cmd);
<     break;
241,266d207
< struct cmd*
< listcmd(struct cmd *left, struct cmd *right)
< {
<   struct listcmd *cmd;
<   
<   cmd = malloc(sizeof(*cmd));
<   memset(cmd, 0, sizeof(*cmd));
<   cmd->type = ';';
<   cmd->left = left;
<   cmd->right = right;
<   return (struct cmd*)cmd;
< }
< 
< struct cmd*
< backcmd(struct cmd *subcmd)
< {
<   struct backcmd *cmd;
<   
<   cmd = malloc(sizeof(*cmd));
<   memset(cmd, 0, sizeof(*cmd));
<   cmd->type = '&';
<   cmd->cmd = subcmd;
<   return (struct cmd*)cmd;
< }
< 
< 
270c211
< char symbols[] = "<|>&;()";
---
> char symbols[] = "<|>";
288,291d228
<   case '(':
<   case ')':
<   case ';':
<   case '&':
364,371d300
<   while(peek(ps, es, "&")){
<     gettoken(ps, es, 0, 0);
<     cmd = backcmd(cmd);
<   }
<   if(peek(ps, es, ";")){
<     gettoken(ps, es, 0, 0);
<     cmd = listcmd(cmd, parseline(ps, es));
<   }
413,432d341
< parseblock(char **ps, char *es)
< {
<   struct cmd *cmd;
<   
<   if(!peek(ps, es, "(")) {
<     fprintf(stderr, "missing (\n");
<     exit(-1);
<   }
<   gettoken(ps, es, 0, 0);
<   cmd = parseline(ps, es);
<   if(!peek(ps, es, ")")) {
<     fprintf(stderr, "missing )\n");
<     exit(-1);  	
<   }
<   gettoken(ps, es, 0, 0);
<   cmd = parseredirs(cmd, ps, es);
<   return cmd;
< }
< 
< struct cmd*
440,442d348
<   if (peek(ps, es, "("))
<     return parseblock(ps, es);
<   
448c354
<   while(!peek(ps, es, "|)&;")){
---
>   while(!peek(ps, es, "|")){
